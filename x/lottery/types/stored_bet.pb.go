// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lottery/lottery/stored_bet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StoredBet struct {
	Index        string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	UserAddr     string `protobuf:"bytes,2,opt,name=userAddr,proto3" json:"userAddr,omitempty"`
	LotteryIndex uint64 `protobuf:"varint,3,opt,name=lotteryIndex,proto3" json:"lotteryIndex,omitempty"`
	OrderIndex   uint64 `protobuf:"varint,4,opt,name=orderIndex,proto3" json:"orderIndex,omitempty"`
	BetAmount    uint64 `protobuf:"varint,5,opt,name=betAmount,proto3" json:"betAmount,omitempty"`
}

func (m *StoredBet) Reset()         { *m = StoredBet{} }
func (m *StoredBet) String() string { return proto.CompactTextString(m) }
func (*StoredBet) ProtoMessage()    {}
func (*StoredBet) Descriptor() ([]byte, []int) {
	return fileDescriptor_933f10169854e887, []int{0}
}
func (m *StoredBet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredBet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoredBet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoredBet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredBet.Merge(m, src)
}
func (m *StoredBet) XXX_Size() int {
	return m.Size()
}
func (m *StoredBet) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredBet.DiscardUnknown(m)
}

var xxx_messageInfo_StoredBet proto.InternalMessageInfo

func (m *StoredBet) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *StoredBet) GetUserAddr() string {
	if m != nil {
		return m.UserAddr
	}
	return ""
}

func (m *StoredBet) GetLotteryIndex() uint64 {
	if m != nil {
		return m.LotteryIndex
	}
	return 0
}

func (m *StoredBet) GetOrderIndex() uint64 {
	if m != nil {
		return m.OrderIndex
	}
	return 0
}

func (m *StoredBet) GetBetAmount() uint64 {
	if m != nil {
		return m.BetAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*StoredBet)(nil), "naruto0913.lottery.lottery.StoredBet")
}

func init() { proto.RegisterFile("lottery/lottery/stored_bet.proto", fileDescriptor_933f10169854e887) }

var fileDescriptor_933f10169854e887 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc8, 0xc9, 0x2f, 0x29,
	0x49, 0x2d, 0xaa, 0xd4, 0x87, 0xd1, 0xc5, 0x25, 0xf9, 0x45, 0xa9, 0x29, 0xf1, 0x49, 0xa9, 0x25,
	0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x52, 0x79, 0x89, 0x45, 0xa5, 0x25, 0xf9, 0x06, 0x96,
	0x86, 0xc6, 0x7a, 0x50, 0x45, 0x30, 0x5a, 0x69, 0x3e, 0x23, 0x17, 0x67, 0x30, 0x58, 0x83, 0x53,
	0x6a, 0x89, 0x90, 0x08, 0x17, 0x6b, 0x66, 0x5e, 0x4a, 0x6a, 0x85, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0x67, 0x10, 0x84, 0x23, 0x24, 0xc5, 0xc5, 0x51, 0x5a, 0x9c, 0x5a, 0xe4, 0x98, 0x92, 0x52, 0x24,
	0xc1, 0x04, 0x96, 0x80, 0xf3, 0x85, 0x94, 0xb8, 0x78, 0xa0, 0x46, 0x79, 0x82, 0x35, 0x32, 0x2b,
	0x30, 0x6a, 0xb0, 0x04, 0xa1, 0x88, 0x09, 0xc9, 0x71, 0x71, 0xe5, 0x17, 0xa5, 0xa4, 0x16, 0x41,
	0x54, 0xb0, 0x80, 0x55, 0x20, 0x89, 0x08, 0xc9, 0x70, 0x71, 0x26, 0xa5, 0x96, 0x38, 0xe6, 0xe6,
	0x97, 0xe6, 0x95, 0x48, 0xb0, 0x82, 0xa5, 0x11, 0x02, 0x4e, 0xee, 0x27, 0x1e, 0xc9, 0x31, 0x5e,
	0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31,
	0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x9b, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f,
	0xab, 0x8f, 0xf0, 0x22, 0x3c, 0x1c, 0x2a, 0xe0, 0xac, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36,
	0x70, 0x68, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x7f, 0xae, 0xc4, 0x31, 0x01, 0x00,
	0x00,
}

func (m *StoredBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredBet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredBet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BetAmount != 0 {
		i = encodeVarintStoredBet(dAtA, i, uint64(m.BetAmount))
		i--
		dAtA[i] = 0x28
	}
	if m.OrderIndex != 0 {
		i = encodeVarintStoredBet(dAtA, i, uint64(m.OrderIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.LotteryIndex != 0 {
		i = encodeVarintStoredBet(dAtA, i, uint64(m.LotteryIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserAddr) > 0 {
		i -= len(m.UserAddr)
		copy(dAtA[i:], m.UserAddr)
		i = encodeVarintStoredBet(dAtA, i, uint64(len(m.UserAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStoredBet(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStoredBet(dAtA []byte, offset int, v uint64) int {
	offset -= sovStoredBet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoredBet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStoredBet(uint64(l))
	}
	l = len(m.UserAddr)
	if l > 0 {
		n += 1 + l + sovStoredBet(uint64(l))
	}
	if m.LotteryIndex != 0 {
		n += 1 + sovStoredBet(uint64(m.LotteryIndex))
	}
	if m.OrderIndex != 0 {
		n += 1 + sovStoredBet(uint64(m.OrderIndex))
	}
	if m.BetAmount != 0 {
		n += 1 + sovStoredBet(uint64(m.BetAmount))
	}
	return n
}

func sovStoredBet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoredBet(x uint64) (n int) {
	return sovStoredBet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoredBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoredBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryIndex", wireType)
			}
			m.LotteryIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIndex", wireType)
			}
			m.OrderIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			m.BetAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BetAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStoredBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStoredBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoredBet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoredBet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredBet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredBet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoredBet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStoredBet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStoredBet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStoredBet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoredBet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStoredBet = fmt.Errorf("proto: unexpected end of group")
)
