// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lottery/lottery/lottery_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LotteryData struct {
	MinBet uint64 `protobuf:"varint,1,opt,name=minBet,proto3" json:"minBet,omitempty"`
	MaxBet uint64 `protobuf:"varint,2,opt,name=maxBet,proto3" json:"maxBet,omitempty"`
	Fee    uint64 `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *LotteryData) Reset()         { *m = LotteryData{} }
func (m *LotteryData) String() string { return proto.CompactTextString(m) }
func (*LotteryData) ProtoMessage()    {}
func (*LotteryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_10da7f793706a590, []int{0}
}
func (m *LotteryData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryData.Merge(m, src)
}
func (m *LotteryData) XXX_Size() int {
	return m.Size()
}
func (m *LotteryData) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryData.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryData proto.InternalMessageInfo

func (m *LotteryData) GetMinBet() uint64 {
	if m != nil {
		return m.MinBet
	}
	return 0
}

func (m *LotteryData) GetMaxBet() uint64 {
	if m != nil {
		return m.MaxBet
	}
	return 0
}

func (m *LotteryData) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func init() {
	proto.RegisterType((*LotteryData)(nil), "naruto0913.lottery.lottery.LotteryData")
}

func init() {
	proto.RegisterFile("lottery/lottery/lottery_data.proto", fileDescriptor_10da7f793706a590)
}

var fileDescriptor_10da7f793706a590 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xca, 0xc9, 0x2f, 0x29,
	0x49, 0x2d, 0xaa, 0xd4, 0x47, 0xa3, 0xe3, 0x53, 0x12, 0x4b, 0x12, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b,
	0xf2, 0x85, 0xa4, 0xf2, 0x12, 0x8b, 0x4a, 0x4b, 0xf2, 0x0d, 0x2c, 0x0d, 0x8d, 0xf5, 0xa0, 0xd2,
	0x30, 0x5a, 0xc9, 0x9f, 0x8b, 0xdb, 0x07, 0xc2, 0x74, 0x49, 0x2c, 0x49, 0x14, 0x12, 0xe3, 0x62,
	0xcb, 0xcd, 0xcc, 0x73, 0x4a, 0x2d, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0x82, 0xf2, 0xc0,
	0xe2, 0x89, 0x15, 0x20, 0x71, 0x26, 0xa8, 0x38, 0x98, 0x27, 0x24, 0xc0, 0xc5, 0x9c, 0x96, 0x9a,
	0x2a, 0xc1, 0x0c, 0x16, 0x04, 0x31, 0x9d, 0xdc, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e,
	0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58,
	0x8e, 0x21, 0x4a, 0x37, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xe1,
	0x22, 0xb8, 0xc3, 0x2b, 0xe0, 0xac, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0xe3, 0x8d,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x76, 0x96, 0x6b, 0xe2, 0x00, 0x00, 0x00,
}

func (m *LotteryData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != 0 {
		i = encodeVarintLotteryData(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxBet != 0 {
		i = encodeVarintLotteryData(dAtA, i, uint64(m.MaxBet))
		i--
		dAtA[i] = 0x10
	}
	if m.MinBet != 0 {
		i = encodeVarintLotteryData(dAtA, i, uint64(m.MinBet))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLotteryData(dAtA []byte, offset int, v uint64) int {
	offset -= sovLotteryData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LotteryData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinBet != 0 {
		n += 1 + sovLotteryData(uint64(m.MinBet))
	}
	if m.MaxBet != 0 {
		n += 1 + sovLotteryData(uint64(m.MaxBet))
	}
	if m.Fee != 0 {
		n += 1 + sovLotteryData(uint64(m.Fee))
	}
	return n
}

func sovLotteryData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLotteryData(x uint64) (n int) {
	return sovLotteryData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LotteryData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLotteryData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBet", wireType)
			}
			m.MinBet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLotteryData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBet |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBet", wireType)
			}
			m.MaxBet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLotteryData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBet |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLotteryData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLotteryData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLotteryData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLotteryData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLotteryData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLotteryData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLotteryData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLotteryData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLotteryData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLotteryData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLotteryData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLotteryData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLotteryData = fmt.Errorf("proto: unexpected end of group")
)
